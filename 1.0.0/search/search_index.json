{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Template documentation This repository is a template allowing easy creation of python repository with a full documnentation automatisation. Usage You can rename the src folder to whichever name you want for your source code (library name if it is a library) Once done you need to replace src to your new name in the following files : scripts/generate_index.py scripts/generate_references.py .github/workflows/generate_gh_pages.yml .github/workflows/tag_latest_release_gh_pages.yml First set-up Once you have set up everything you can do the following commands : python -m venv venv source venv/bin/activate pip install -e . mike deploy [version] latest mike set-default latest All those commands will build a first version [version] of your doc, tag it as the latest and use it by default. You can then do the following command to check the built version locally : mike serve Update the documentation To check how your current doc would look like without adding it to the distant documentation you can use the following command: mkdocs serve Once you are ok with the changes you can either push your changes to your main branch which will trigger an automatic update of your doc. Or you can use the following command mike deploy [--push] [version] --push will allow to push the new version of your doc directly to the distant one. version is the version number of your doc, you can use an existing number to override an existing doc Change default version If you want to change which version is displayed by default, you can use the following command : mike alias [version] latest With the previous settings you made that the default version used is the one with the alias latest this command allows you to change which branch has that alias","title":"Home"},{"location":"#template-documentation","text":"This repository is a template allowing easy creation of python repository with a full documnentation automatisation.","title":"Template documentation"},{"location":"#usage","text":"You can rename the src folder to whichever name you want for your source code (library name if it is a library) Once done you need to replace src to your new name in the following files : scripts/generate_index.py scripts/generate_references.py .github/workflows/generate_gh_pages.yml .github/workflows/tag_latest_release_gh_pages.yml","title":"Usage"},{"location":"#first-set-up","text":"Once you have set up everything you can do the following commands : python -m venv venv source venv/bin/activate pip install -e . mike deploy [version] latest mike set-default latest All those commands will build a first version [version] of your doc, tag it as the latest and use it by default. You can then do the following command to check the built version locally : mike serve","title":"First set-up"},{"location":"#update-the-documentation","text":"To check how your current doc would look like without adding it to the distant documentation you can use the following command: mkdocs serve Once you are ok with the changes you can either push your changes to your main branch which will trigger an automatic update of your doc. Or you can use the following command mike deploy [--push] [version] --push will allow to push the new version of your doc directly to the distant one. version is the version number of your doc, you can use an existing number to override an existing doc","title":"Update the documentation"},{"location":"#change-default-version","text":"If you want to change which version is displayed by default, you can use the following command : mike alias [version] latest With the previous settings you made that the default version used is the one with the alias latest this command allows you to change which branch has that alias","title":"Change default version"},{"location":"dependencies/","text":"List of dependencies Documentation generation requirements","title":"Dependencies"},{"location":"dependencies/#list-of-dependencies","text":"Documentation generation requirements","title":"List of dependencies"},{"location":"references/SUMMARY/","text":"References src function_file class_file","title":"SUMMARY"},{"location":"references/src.class_file/","text":"src.class_file MyClass This is an empty example class Source code in src/class_file.py 1 2 3 4 5 6 class MyClass : \"\"\"This is an empty example class\"\"\" def my_method ( self ): \"\"\"This is an empty method\"\"\" pass my_method () This is an empty method Source code in src/class_file.py 4 5 6 def my_method ( self ): \"\"\"This is an empty method\"\"\" pass","title":"class_file"},{"location":"references/src.class_file/#srcclass_file","text":"","title":"src.class_file"},{"location":"references/src.class_file/#src.class_file.MyClass","text":"This is an empty example class Source code in src/class_file.py 1 2 3 4 5 6 class MyClass : \"\"\"This is an empty example class\"\"\" def my_method ( self ): \"\"\"This is an empty method\"\"\" pass","title":"MyClass"},{"location":"references/src.class_file/#src.class_file.MyClass.my_method","text":"This is an empty method Source code in src/class_file.py 4 5 6 def my_method ( self ): \"\"\"This is an empty method\"\"\" pass","title":"my_method()"},{"location":"references/src.function_file/","text":"src.function_file function_file my_function () This is an empty function Source code in src/function_file.py 1 2 3 def my_function (): \"\"\"This is an empty function\"\"\" pass","title":"function_file"},{"location":"references/src.function_file/#srcfunction_file","text":"","title":"src.function_file"},{"location":"references/src.function_file/#src.function_file","text":"","title":"function_file"},{"location":"references/src.function_file/#src.function_file.my_function","text":"This is an empty function Source code in src/function_file.py 1 2 3 def my_function (): \"\"\"This is an empty function\"\"\" pass","title":"my_function()"}]}